# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Backend unit tests

on:
    pull_request:

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  # Database
  DEV_MODE: true
  ELASTIC__HOST: elasticsearch
  ELASTIC__VERSION: 8.11.0
  ELASTIC__USER: elastic
  ELASTIC__PASSWORD: redboxpass  # pragma: allowlist secret
  ELASTIC__PORT: 9200
  ELASTIC__SCHEME: http
  ELASTIC__SUBSCRIPTION_LEVEL: basic
  KIBANA_SYSTEM_PASSWORD: redboxpass  # pragma: allowlist secret
  METRICBEAT_INTERNAL_PASSWORD: redboxpass  # pragma: allowlist secret
  FILEBEAT_INTERNAL_PASSWORD: redboxpass  # pragma: allowlist secret
  HEARTBEAT_INTERNAL_PASSWORD: redboxpass  # pragma: allowlist secret
  MONITORING_INTERNAL_PASSWORD: redboxpass  # pragma: allowlist secret
  BEATS_SYSTEM_PASSWORD: redboxpass  # pragma: allowlist secret
  # Object storage
  MINIO_HOST: minio
  MINIO_PORT: 9000
  AWS_ACCESS_KEY: minioadmin
  AWS_SECRET_KEY: minioadmin  # pragma: allowlist secret
  AWS_REGION: eu-west-2
  OBJECT_STORE: minio
  BUCKET_NAME: redbox-storage-dev
  # Embedding and chunking
  EMBEDDING_MODEL: sentence-transformers/all-MiniLM-L6-v2
  SENTENCE_TRANSFORMERS_HOME: /app/models
  PARTITION_STRATEGY: fast
  # Redis
  EMBED_QUEUE_NAME: redbox-embedder-queue
  INGEST_QUEUE_NAME: redbox-ingester-queue
  REDIS_HOST: redis
  REDIS_PORT: 6379
  # Streamlit app
  CONTACT_EMAIL: redbox-copilot@cabinetoffice.gov.uk
  STREAMLIT_SECRET_KEY: 1n53cur3K3y  # pragma: allowlist secret
  STREAMLIT_BACKEND: LOCAL
  CORE_API_HOST: http://core-api
  CORE_API_PORT: 5002
  # Django app (required for core API to work)
  DJANGO_SETTINGS_MODULE: redbox_app.settings
  DEBUG: True
  DJANGO_SECRET_KEY: 1n53cur3K3y  # pragma: allowlist secret
  DJANGO_LOG_LEVEL: WARNING
  ENVIRONMENT: LOCAL
  POSTGRES_HOST: db
  POSTGRES_USER: redbox-core
  POSTGRES_DB: redbox-core
  POSTGRES_PASSWORD: insecure  # pragma: allowlist secret
  EMAIL_BACKEND_TYPE: CONSOLE
  NOTIFY_API_KEY: f4k3_k3y  # pragma: allowlist secret
  FROM_EMAIL: test@example.com
  GOVUK_NOTIFY_PLAIN_EMAIL_TEMPLATE_ID: example-id
  EMAIL_FILE_PATH: '/app/mail'
  USE_STREAMING: False

permissions:
    contents: read

jobs:
    backend-test:

      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v4

      - name: Free disk space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Add dependencies for unstructured
        run: |
          sudo apt update && sudo apt-get install -y \
          poppler-utils \
          tesseract-ocr \
          ffmpeg \
          libsm6 \
          libxext6

      - name: Install poetry
        run: |
          pipx install poetry

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: poetry
          cache-dependency-path: poetry.lock

      - name: Set poetry environment
        run: |
          poetry env use 3.11

      - name: Install dependencies
        run: |
          poetry install --no-root --with dev

      - name: Build containers
        run: |
          mkdir -p data/elastic/
          mkdir -p data/objectstore/
          mkdir -p data/queue/
          chmod -R 777 data/

          sudo mkdir -p /app
          sudo chmod -R 777 /app

          cp .env.example .env

          make up

      - name: Wait 30s for services to be ready
        run: |
          sleep 30

      - name: Run unit tests with pytest
        run: |
          poetry run pytest

      - name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2


    static-checks:

      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: poetry
          cache-dependency-path: poetry.lock

      - name: Set poetry environment
        run: poetry env use 3.11

      - name: Install dependencies
        run: poetry install --no-root --with dev

      - name: Format code
        run: |
          make lint
          make format

      - name: Type check
        run: |
          make types
