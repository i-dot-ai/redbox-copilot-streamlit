# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Backend unit tests

on:
    pull_request:

permissions:
    contents: read

jobs:
    backend-test:

      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v3

      - name: Add dependencies for unstructured
        run: |
          sudo apt update && sudo apt-get install -y \
          poppler-utils \
          tesseract-ocr

      - name: Install poetry
        run: |
          pipx install poetry

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: poetry
          cache-dependency-path: poetry.lock

      - name: Set poetry environment
        run: |
          poetry env use 3.11

      - name: Install dependencies
        run: |
          poetry install --no-root --with dev

      - name: Build containers
        run: |
          mkdir -p data/elastic/
          mkdir -p data/objectstore/
          mkdir -p data/queue/
          chmod -R 777 data/

          sudo mkdir -p /app
          sudo chmod -R 777 /app

          cp .env.example /app/.env
          echo OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} >> /app/.env

          make up

      - name: Wait 30s for services to be ready
        run: |
          sleep 30

      - name: Run unit tests with pytest
        run: |
          poetry run pytest


    static_checks:

      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: poetry
          cache-dependency-path: poetry.lock

      - name: Set poetry environment
        run: poetry env use 3.11

      - name: Install dependencies
        run: poetry install --no-root --with dev

      - name: Format code
        run: |
          make lint
          make format

      - name: Type check
        run: |
          make types
