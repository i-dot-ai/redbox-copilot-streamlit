services:
  requirements:
    image: python:3.11
    profiles:
      - utils
    volumes:
      - ./:/app/:z
  streamlit-app:
    image: redbox-streamlit-app:latest
    profiles:
      - frontend
    build:
      context: .
      dockerfile: ./streamlit_app/Dockerfile
      args:
        - EMBEDDING_MODEL=${EMBEDDING_MODEL}
        - SENTENCE_TRANSFORMERS_HOME=${SENTENCE_TRANSFORMERS_HOME}
    env_file:
      - .env
    ports:
      - 8501:8501
    volumes:
      - ./data:/app/data:Z
      - ./streamlit_app:/app/streamlit_app/
      - ./redbox:/app/redbox/
    depends_on:
      - elasticsearch
      - minio
    links:
      - elasticsearch
      - minio
    networks:
      - redbox-app-network
  worker:
    image: redbox-worker:latest
    profiles:
      - backend-core
    build:
      context: https://github.com/i-dot-ai/redbox-copilot.git
      dockerfile: ./worker/Dockerfile
      args:
        - EMBEDDING_MODEL=${EMBEDDING_MODEL}
    environment:
      # Chunking
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - PARTITION_STRATEGY=${PARTITION_STRATEGY}
      # Database
      - ELASTIC__HOST=${ELASTIC__HOST}
      - ELASTIC__VERSION=${ELASTIC__VERSION}
      - ELASTIC__USER=${ELASTIC__USER}
      - ELASTIC__PASSWORD=${ELASTIC__PASSWORD}
      - ELASTIC__PORT=${ELASTIC__PORT}
      - ELASTIC__SCHEME=${ELASTIC__SCHEME}
      # Object storage
      - MINIO_HOST=${MINIO_HOST}
      - MINIO_PORT=${MINIO_PORT}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
      - OBJECT_STORE=${OBJECT_STORE}
      - BUCKET_NAME=${BUCKET_NAME}
      # Etc
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - redis
      - elasticsearch
      - minio
    networks:
      - redbox-app-network
    restart: unless-stopped
  core-api:
    image: redbox-core-api:latest
    profiles:
      - backend-core
    build:
      context: https://github.com/i-dot-ai/redbox-copilot.git
      dockerfile: ./core_api/Dockerfile
      args:
        - EMBEDDING_MODEL=${EMBEDDING_MODEL}
    ports:
      - 5002:5002
    environment:
      - PORT=5002
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      # Database
      - ELASTIC__HOST=${ELASTIC__HOST}
      - ELASTIC__VERSION=${ELASTIC__VERSION}
      - ELASTIC__USER=${ELASTIC__USER}
      - ELASTIC__PASSWORD=${ELASTIC__PASSWORD}
      - ELASTIC__PORT=${ELASTIC__PORT}
      - ELASTIC__SCHEME=${ELASTIC__SCHEME}
      # Object storage
      - MINIO_HOST=${MINIO_HOST}
      - MINIO_PORT=${MINIO_PORT}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_REGION=${AWS_REGION}
      - OBJECT_STORE=${OBJECT_STORE}
      - BUCKET_NAME=${BUCKET_NAME}
      # Etc
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - redbox-app-network
    depends_on:
      - elasticsearch
      - minio
      - redis
      - worker
    restart: unless-stopped
  minio:
    image: minio/minio
    profiles:
      - backend-core
      - backend-local
    expose:
      - "9000"
      - "9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    command: server --console-address ":9001" /data
    networks:
      - redbox-app-network
    volumes:
      - ./data/objectstore:/data
  elasticsearch:
    image: elasticsearch:8.12.0
    profiles:
      - backend-core
      - backend-local
    volumes:
      - ./data/elastic/:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      # node.name: elasticsearch
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      # ELASTIC__PASSWORD: ${ELASTIC__PASSWORD:-}
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
    networks:
      - redbox-app-network
    restart: unless-stopped
  redis:
    image: redis:7-alpine
    profiles:
      - backend-core
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis:/data/redis
    env_file:
      - .env
    networks:
      - redbox-app-network

networks:
  redbox-app-network:
    driver: bridge

volumes:
  elasticsearch:
  redbox-app-data:
  redis:
    driver: local
  redis-insight:
